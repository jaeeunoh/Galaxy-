#include "queue.h"

#include <stdlib.h>

// Create a new empty queue
 my_queue_t* queue_create() {
     my_queue_t* queue = (my_queue_t*) malloc(sizeof(my_queue_t));
         assert(queue != NULL);
             queue->head = NULL;
                 queue->tail= queue->head;
                     pthread_mutex_init(&queue->hlock, NULL); 
                         pthread_mutex_init(&queue->tlock, NULL); 
                             return queue;
                             }

                             // Destroy a queue
                             void queue_destroy(my_queue_t* queue) {
                                 assert(queue != NULL);
                                     queue_node_t* temp = queue->head;
                                         while (temp != NULL) {
                                                 queue->head = temp->next;
                                                         free(temp);
                                                                 temp = queue->head;
                                                                     }

                                                                         pthread_mutex_destroy(&queue->hlock); 
                                                                             pthread_mutex_destroy(&queue->tlock); 

                                                                                 free(queue);
                                                                                     return;
                                                                                     }

                                                                                     // Put an element at the end of a queue
                                                                                     void queue_put(my_queue_t* queue, const char* element) {
                                                                                         queue_node_t* node = (queue_node_t*) malloc(sizeof(queue_node_t));
                                                                                             assert(node != NULL);
                                                                                                 node->element = element; 
                                                                                                     node->next = NULL;

                                                                                                         pthread_mutex_lock(&queue->tlock);
                                                                                                             if (queue->tail == NULL) {
                                                                                                                     // pthread lock for head? 
                                                                                                                             queue->head = node;    
                                                                                                                                 } else {
                                                                                                                                         queue->tail->next = node;
                                                                                                                                             }
                                                                                                                                                 queue->tail = node;
                                                                                                                                                     pthread_mutex_unlock(&queue->tlock);
                                                                                                                                                     }

                                                                                                                                                     // Take an element off the front of a queue
                                                                                                                                                     const char* queue_take(my_queue_t* queue) {
                                                                                                                                                         if (queue->head == NULL) {
                                                                                                                                                                return NULL;
                                                                                                                                                                    } else {
                                                                                                                                                                            const char * result = NULL;

                                                                                                                                                                                            pthread_mutex_lock(&queue->hlock); 
                                                                                                                                                                                                    queue_node_t* temp = queue->head;
                                                                                                                                                                                                            queue->head = temp->next;
                                                                                                                                                                                                                    pthread_mutex_unlock(&queue->hlock); 
                                                                                                                                                                                                                            result = temp->element;
                                                                                                                                                                                                                                    free(temp);

                                                                                                                                                                                                                                            return result;
                                                                                                                                                                                                                                                } 
                                                                                                                                                                                                                                                }
